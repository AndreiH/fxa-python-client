#!/usr/bin/env python

import os, sys, urlparse
from fxa_client import (GET, printhex, binary_type, POST, resendForgotPassword,
                        stretch, verifyForgotPassword, HKDF, KW, split,
                        HAWK_POST, getRestmailVerifyUrl, RESTMAILURL,
                        verifyUrl, changePassword, getEmailStatus,
                        fetchKeys, signCertificate, dumpCert, HOST,
                        destroySession, WebError)

def main():
    GET("__heartbeat__", versioned="")
    command = sys.argv[1]
    if command in ("create", "login", "login-with-keys", "destroy"):
        emailUTF8, passwordUTF8 = sys.argv[2:4]
        printhex("email", emailUTF8)
        printhex("password", passwordUTF8)
    elif command == "change-password":
        emailUTF8, passwordUTF8, newPasswordUTF8 = sys.argv[2:5]
    elif command == "forgotpw-send":
        emailUTF8 = sys.argv[2]
    elif command == "forgotpw-resend":
        emailUTF8, passwordForgotToken_hex = sys.argv[2:4]
        passwordForgotToken = passwordForgotToken_hex.decode("hex")
    elif command == "forgotpw-submit":
        emailUTF8,passwordForgotToken_hex,code,newPasswordUTF8 = sys.argv[2:6]
        passwordForgotToken = passwordForgotToken_hex.decode("hex")
    elif command in ("verify", "get-token-code"):
        emailUTF8 = sys.argv[2]
    else:
        raise NotImplementedError("unknown command '%s'" % command)

    assert isinstance(emailUTF8, binary_type)

    if command == "forgotpw-send":
        r = POST("password/forgot/send_code",
                 {"email": emailUTF8})
        print r
        passwordForgotToken = r["passwordForgotToken"]
        return

    if command == "forgotpw-resend":
        r = resendForgotPassword(passwordForgotToken, emailUTF8)
        print r
        return

    if command == "forgotpw-submit":
        newAuthPW = stretch(emailUTF8, newPasswordUTF8)[0]
        accountResetToken = verifyForgotPassword(passwordForgotToken, code)
        x = HKDF(SKM=accountResetToken,
                 XTS=None,
                 CTXinfo=KW("accountResetToken"),
                 dkLen=2*32)
        tokenID, reqHMACkey = split(x)
        r = HAWK_POST("account/reset", tokenID, reqHMACkey,
                      {"authPW": newAuthPW.encode("hex"),
                       })
        print r
        assert r == {}, r
        return

    if command == "verify":
        verify_url = getRestmailVerifyUrl(os.path.join(RESTMAILURL, emailUTF8))
        print 'Verify URL: ', verify_url
        r = verifyUrl(verify_url)
        assert r.code == 200
        print 'Verified Acct'
        return

    if command == "get-token-code":
        forgot_url = getRestmailVerifyUrl(os.path.join(RESTMAILURL, emailUTF8))
        token_code = urlparse.parse_qs(urlparse.urlparse(forgot_url).query)
        print token_code['token'][0], token_code['code'][0]
        return

    assert command in ("create", "login", "login-with-keys", "destroy",
                       "change-password")

    authPW, unwrapBKey = stretch(emailUTF8, passwordUTF8)

    if command == "create":
        r = POST("account/create",
                 {"email": emailUTF8,
                  "authPW": authPW.encode("hex"),
                  })
        print r
        print "Now use the 'curl' command from the server logs to verify"
        print "Or if you used restmail.net use the verify command"
        return

    if command == "destroy":
        r = POST("account/destroy",
                 {"email": emailUTF8,
                  "authPW": authPW.encode("hex"),
                  })
        print r
        return

    if command == "change-password":
        newPasswordUTF8 = sys.argv[4]
        return changePassword(emailUTF8, passwordUTF8, newPasswordUTF8)

    assert command in ("login", "login-with-keys")
    getKeys = bool(command == "login-with-keys")

    r = POST("account/login?keys=true" if getKeys else "account/login",
             {"email": emailUTF8,
              "authPW": authPW.encode("hex"),
              })
    uid = str(r["uid"])
    sessionToken = r["sessionToken"].decode("hex")
    printhex("sessionToken", sessionToken)
    if getKeys:
        keyFetchToken = r["keyFetchToken"].decode("hex")
        printhex("keyFetchToken", keyFetchToken)

    email_status = getEmailStatus(sessionToken)
    print "email status:", email_status
    if email_status and getKeys:
        kA,kB = fetchKeys(keyFetchToken, unwrapBKey)
        printhex("kA", kA)
        printhex("kB", kB)

    if email_status:
        # exercise /certificate/sign . jwcrypto in the server demands that
        # "n" be of a recognized length (512 bits is the shortest it likes)
        pubkey = {"algorithm": "RS",
                  "n": "%d" % (2**512), "e": "2"}
        cert = signCertificate(sessionToken, pubkey, 24*3600*1000)
        print "cert:", cert
        header, payload = dumpCert(cert)
        assert header["alg"] == "RS256"
        assert payload["principal"]["email"] == "%s@%s" % (uid, HOST)
    # exercise /session/destroy
    print "destroying session now"
    print destroySession(sessionToken)
    print "session destroyed, this getEmailStatus should fail:"
    # check that the session is really gone
    try:
        getEmailStatus(sessionToken)
    except WebError as e:
        assert e.r.status_code == 401
        print e.r.content
        print " good, session really destroyed"
    else:
        print "bad, session not destroyed"
        assert 0

if __name__ == '__main__':
    main()

# exercised:
#  account/create
#  NO: account/devices (might not even be implemented)
#  account/keys
#  account/reset
#  account/destroy
#
#  account/login
#
#  session/destroy
#
#  recovery_email/status
#  NO: recovery_email/resend_code
#  NO: recovery_email/verify_code
#
#  certificate/sign
#
#  password/change/start
#  password/change/finish
#  password/forgot/send_code
#  password/forgot/resend_code
#  password/forgot/verify_code
#
#  NO: get_random_bytes
